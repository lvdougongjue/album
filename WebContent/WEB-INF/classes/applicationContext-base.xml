<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->
	<mvc:annotation-driven />
	<bean id="propertyBean"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath:application.properties</value>
			</list>
		</property>
	</bean>
	<bean id="applicationProperties" class="net.doddata.common.ApplicationProperties">
		<property name="prop">
			<ref bean="propertyBean" />
		</property>
	</bean>
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:application.properties</value>
				<value>classpath:hibernate.properties</value>
			</list>
		</property>
	</bean>

	<bean class="net.doddata.common.BeanFactory" />

	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/html;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>
	<bean
		class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping" />
	<context:component-scan base-package="net.doddata" />

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${hibernate.connection.driver_class}" />
		<property name="jdbcUrl" value="${hibernate.connection.url}" />
		<property name="user" value="${hibernate.connection.username}" />
		<property name="password" value="${hibernate.connection.password}" />

		<property name="automaticTestTable" value="c3p0_test"></property>
		<!-- <property name="checkoutTimeout" value="30000"></property> -->
		<property name="idleConnectionTestPeriod" value="60"></property>
		<property name="initialPoolSize" value="5"></property>
		<property name="maxIdleTime" value="60"></property>
		<property name="maxPoolSize" value="100"></property>
		<property name="minPoolSize" value="10"></property>
	</bean>

	<!-- SessionFactory -->
	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.cglib.use_reflection_optimizer">${hibernate.cglib.use_reflection_optimizer}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.connection.autocommit">false</prop>

			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>net.doddata.**.model</value>
			</list>
		</property>
	</bean>
	<bean id="commonDAO" class="net.doddata.common.dao.impl.CommonDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>

	<!-- Transaction manager for a single Hibernate SessionFactory (alternative 
		to JTA) -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>


	<!-- 事务处理 -->
	<!-- 事务拦截器，拦截指定的方法 -->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="check*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="list*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

	<!-- 对于需要添加事务的业务对象进行自动代理 -->
	<bean id="businessObjectAutoProxyCreator"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>*Dao</value>
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>

	<bean id="contentNegotiatingViewResolver"
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="defaultContentType" value="text/html" />
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
			</map>
		</property>
		<property name="viewResolvers">
			<list>
				<ref bean="velocityViewResolver" />
			</list>
		</property>
		<property name="defaultViews">
			<list>
				<ref bean="jsonJsonView" />
			</list>
		</property>
	</bean>

	<bean id="jsonJsonView"
		class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
		<property name="contentType" value="application/json" />
	</bean>

	<bean id="velocityViewResolver"
		class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
		<property name="exposeRequestAttributes" value="true" />
		<property name="exposeSessionAttributes" value="true" />
		<property name="exposeSpringMacroHelpers" value="true" />
		<property name="requestContextAttribute" value="request" />
		<property name="contentType" value="text/html;charset=UTF-8" />
		<property name="cache" value="true" />
		<property name="prefix" value="" />
		<property name="suffix" value=".vm" />
		<property name="numberToolAttribute" value="number" />
		<property name="dateToolAttribute" value="date" />
		<property name="toolboxConfigLocation" value="/WEB-INF/classes/velocity-toolbox.xml" />
		<property name="viewClass" value="net.doddata.common.NVelocityToolboxView" />
	</bean>

	<bean id="velocityConfig"
		class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<property name="resourceLoaderPath" value="/WEB-INF/view" />
		<property name="velocityProperties">
			<props>
				<prop key="resource.loader">file</prop>
				<prop key="file.resource.loader.class">org.apache.velocity.runtime.resource.loader.FileResourceLoader
				</prop>
				<prop key="file.resource.loader.cache">true</prop>
				<prop key="file.resource.loader.modificationCheckInterval">2</prop>
				<prop key="velocimacro.library">velocity-globalMacros.vm</prop>
				<prop key="directive.parse.max.depth">5</prop>
				<prop key="velocimacro.permissions.allow.inline">true</prop>
				<prop key="velocimacro.permissions.allow.inline.to.replace.global">false</prop>
				<prop key="velocimacro.permissions.allow.inline.local.scope">false</prop>
				<prop key="directive.set.null.allowed">true</prop>
				<prop key="velocimacro.context.localscope">false</prop>
				<prop key="input.encoding">UTF-8</prop>
				<prop key="output.encoding">UTF-8</prop>
			</props>
		</property>
	</bean>
</beans>